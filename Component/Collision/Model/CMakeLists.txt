cmake_minimum_required(VERSION 3.12)
project(Sofa.Component.Collision.Model LANGUAGES CXX)

set(SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR "src/sofa/component/collision/model")

set(HEADER_FILES
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/config.h.in
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/init.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/Cube.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/CubeModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/CylinderModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/CylinderModel.inl
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/Sphere.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/SphereModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/SphereModel.inl  
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/Line.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/LineModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/LineModel.inl    
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/Point.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/PointModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/PointModel.inl
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/Triangle.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/TriangleModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/TriangleModel.inl
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/RayModel.h
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/TriangleOctreeModel.h
)

set(SOURCE_FILES
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/init.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/CubeModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/CylinderModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/SphereModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/LineModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/PointModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/TriangleModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/RayModel.cpp
    ${SOFACOMPONENTCOLLISIONMODEL_SOURCE_DIR}/TriangleOctreeModel.cpp
)

sofa_find_package(Sofa.SimulationCore REQUIRED)

add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES})
target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.SimulationCore)

sofa_create_package_with_targets(
    PACKAGE_NAME ${PROJECT_NAME}
    PACKAGE_VERSION ${Sofa_VERSION}
    TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES
    INCLUDE_SOURCE_DIR "src"
    INCLUDE_INSTALL_DIR "${PROJECT_NAME}"
)
